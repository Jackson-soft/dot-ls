# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
    push:
        branches: ["main"]
        tags:
            - "*.*.*"
    pull_request:
        branches: ["main"]

jobs:
    build:
        runs-on: ${{ matrix.os }}

        strategy:
            # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
            fail-fast: false

            # Set up a matrix to run the following 3 configurations:
            # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
            # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
            # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
            #
            # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
            matrix:
                os: [ubuntu-24.04, windows-latest, macos-13, macos-latest]
                build_type: [Release]
                include:
                    - os: windows-latest
                      c_compiler: cl
                      cpp_compiler: cl
                      target: windows
                      platform: win32-x64
                    - os: ubuntu-24.04
                      c_compiler: gcc-14
                      cpp_compiler: g++-14
                      target: linux
                      platform: linux-x64
                    - os: macos-latest
                      c_compiler: apple-clang
                      cpp_compiler: apple-clang
                      target: darwin
                      platform: darwin-arm64
                    - os: macos-13
                      c_compiler: apple-clang
                      cpp_compiler: apple-clang
                      target: darwin
                      platform: darwin-x64

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  submodules: "true"

            - name: Get Conan
              run: python3 -m pip install conan --break-system-packages

            - name: Create default profile
              run: conan profile detect --force

            - name: Install dependencies
              shell: bash
              run: |
                  if [ ${{ runner.os }} == 'Linux' ]; then
                    conan install . -s compiler.cppstd=23 -s compiler.version=14 -b missing -u
                  else
                    conan install . -s compiler.cppstd=23 -b missing -u
                  fi

            - name: Configure CMake
              # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
              # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
              run: cmake --preset conan-release -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}

            - name: Build
              # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
              run: cmake --build ${{github.workspace}}/build --preset conan-release

            - name: Test
              working-directory: ${{github.workspace}}/build
              # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
              # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
              run: ctest --build-config ${{ matrix.build_type }}
